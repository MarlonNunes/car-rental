name: car-rental application deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Zip files
        run: zip -r car-rental.zip build/libs/*.jar appspec.yml scripts/

      - name: Upload to S3
        run: aws s3 cp car-rental.zip s3://car-renta-deploy/deploy/backend/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment
        run: |
          OUTPUT=$(aws deploy create-deployment \
            --application-name car-rental \
            --deployment-group-name car-rental-group \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --s3-location bucket=car-renta-deploy,key=deploy/backend/car-rental.zip,bundleType=zip)
          echo "deployment_id=$(echo $OUTPUT | jq -r .deploymentId)" >> $GITHUB_ENV

      - name: Wait for deployment completion
        run: |
          DEPLOYMENT_ID=$deployment_id
          while true; do
            STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID | jq -r .deploymentInfo.status)
            echo "Deployment status: $STATUS"
            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "Deployment succeeded."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "Deployment failed."
              exit 1
            fi
              sleep 30
          done
